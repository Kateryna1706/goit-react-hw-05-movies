{"version":3,"file":"static/js/779.80631357.chunk.js","mappings":"qPAEaA,E,QAAcC,EAAAA,GAAH,mR,mBC8DxB,EAzDgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WACHF,IAGLD,GAAW,GACXI,EAAAA,EAAAA,IAAA,6CAE0CH,EAF1C,sDAIGI,MAAK,SAAAC,GACJ,IAAMT,EAAUS,EAASC,KAAKC,QAE9B,GADAV,EAAWD,GACY,IAAnBA,EAAQY,OACV,MAAM,IAAIC,MAAM,YAEnB,IACAC,OAAM,SAAAC,GACLC,EAAAA,OAAAA,QAAe,YAChB,IACAC,QAAQd,GAAW,IACvB,GAAE,CAACC,KAGF,2BACGF,IACC,SAAC,KAAD,CACEgB,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,aAGV,SAAC5B,EAAD,UACsB,IAAnBG,EAAQY,OACPZ,EAAQ0B,KAAI,SAAAC,GAAM,OAChB,2BACE,0BAAI,WAASA,EAAOC,eAAeC,aACnC,uBAAIF,EAAOG,YAFJH,EAAOI,GADA,KAOlB,uBAAG,iDAKZ,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListReviews = styled.ul`\n  padding-bottom: 20px;\n  padding-top: 20px;\n  margin: 0;\n  font-size: 25px;\n\n  li {\n    padding-bottom: 20px;\n  }\n\n  h3 {\n    margin: 0;\n    padding-bottom: 20px;\n    font-weight: 600;\n  }\n\n  p {\n    padding: 0;\n    margin: 0;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { Notify } from 'notiflix';\nimport { ListReviews } from './Reviews.styled';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    setLoading(true);\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=cb48852f2616f6f5995e859b25c73cfe`\n      )\n      .then(response => {\n        const reviews = response.data.results;\n        setReviews(reviews);\n        if (reviews.length === 0) {\n          throw new Error('No found!');\n        }\n      })\n      .catch(error => {\n        Notify.failure('No found!');\n      })\n      .finally(setLoading(false));\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && (\n        <MagnifyingGlass\n          visible={true}\n          height=\"300\"\n          width=\"300\"\n          ariaLabel=\"MagnifyingGlass-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"MagnifyingGlass-wrapper\"\n          glassColor=\"#c0efff\"\n          color=\"#e15b64\"\n        />\n      )}\n      <ListReviews>\n        {reviews.length !== 0 ? (\n          reviews.map(review => (\n            <li key={review.id}>\n              <h3>Author: {review.author_details.username}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))\n        ) : (\n          <p>We don't have any reviews for this movie</p>\n        )}\n      </ListReviews>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["ListReviews","styled","useState","reviews","setReviews","loading","setLoading","movieId","useParams","useEffect","axios","then","response","data","results","length","Error","catch","error","Notify","finally","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","map","review","author_details","username","content","id"],"sourceRoot":""}