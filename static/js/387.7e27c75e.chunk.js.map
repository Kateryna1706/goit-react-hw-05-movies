{"version":3,"file":"static/js/387.7e27c75e.chunk.js","mappings":"qPAEaA,E,QAAWC,EAAAA,GAAH,2E,mBCwErB,EAhEa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WACHF,IAGLD,GAAW,GACXI,EAAAA,EAAAA,IAAA,6CAE0CH,EAF1C,sDAIGI,MAAK,SAAAC,GACJ,IAAMT,EAASS,EAASC,KAAKC,KAE7B,GADAV,EAAUD,IACLA,EACH,MAAM,IAAIY,MAAM,YAEnB,IACAC,OAAM,SAAAC,GACLC,EAAAA,OAAAA,QAAe,YAChB,IACAC,QAAQb,GAAW,IACvB,GAAE,CAACC,KAGF,2BACGF,IACC,SAAC,KAAD,CACEe,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,aAGV,SAAC3B,EAAD,UACGG,GACCA,EAAOyB,KAAI,SAAAC,GAAK,OACd,2BACE,gBACEC,IACED,EAAME,aAAN,yCACsCF,EAAME,cAD5C,UAjDhB,+EAqDcT,MAAO,IACPU,IAAI,YAGN,uBAAIH,EAAMI,QACV,yBAAG,cAAYJ,EAAMK,eAZdL,EAAMM,GADD,QAmBzB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListCast = styled.ul`\n  font-size: 25px;\n  p {\n    margin: 20px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { Notify } from 'notiflix';\nimport { ListCast } from './Cast.styled';\nimport { useParams } from 'react-router-dom';\n\nconst defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    setLoading(true);\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=cb48852f2616f6f5995e859b25c73cfe`\n      )\n      .then(response => {\n        const actors = response.data.cast;\n        setActors(actors);\n        if (!actors) {\n          throw new Error('No found!');\n        }\n      })\n      .catch(error => {\n        Notify.failure('No found!');\n      })\n      .finally(setLoading(false));\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && (\n        <MagnifyingGlass\n          visible={true}\n          height=\"300\"\n          width=\"300\"\n          ariaLabel=\"MagnifyingGlass-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"MagnifyingGlass-wrapper\"\n          glassColor=\"#c0efff\"\n          color=\"#e15b64\"\n        />\n      )}\n      <ListCast>\n        {actors &&\n          actors.map(actor => (\n            <li key={actor.id}>\n              <img\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                    : `${defaultImg}`\n                }\n                width={150}\n                alt=\"poster\"\n              />\n\n              <p>{actor.name}</p>\n              <p>Character: {actor.character}</p>\n            </li>\n          ))}\n      </ListCast>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["ListCast","styled","useState","actors","setActors","loading","setLoading","movieId","useParams","useEffect","axios","then","response","data","cast","Error","catch","error","Notify","finally","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","map","actor","src","profile_path","alt","name","character","id"],"sourceRoot":""}